#!/usr/bin/env python

import argparse
import json
import os
import xml.etree.ElementTree


def select_pycharm(project_dir):
    iml_path = ".idea/qc.iml"

    if not os.path.exists(iml_path):
        return

    idea_module = xml.etree.ElementTree.parse(iml_path)

    source_folders_container = [*idea_module.getroot().iter("content")][0]
    source_folders_container_url = source_folders_container.attrib["url"]

    source_folders_container.clear()
    source_folders_container.attrib["url"] = source_folders_container_url

    elem = xml.etree.ElementTree.Element("sourceFolder")
    elem.attrib["url"] = f"{source_folders_container_url}/{project_dir}"
    elem.attrib["isTestSource"] = "false"
    source_folders_container.append(elem)

    idea_module.write(iml_path, encoding="utf8")


def select_vscode(project_dir):
    json_path = ".vscode/settings.json"

    if not os.path.exists(json_path):
        return

    with open(json_path) as file:
        vscode_settings = json.loads(file.read())

    vscode_settings["python.analysis.extraPaths"] = [project_dir]

    with open(json_path, "w") as file:
        json.dump(vscode_settings, file, indent=4)


parser = argparse.ArgumentParser(description="select a QuantConnect project to work on")
parser.add_argument("path", help="path of the project to select")

args = parser.parse_args()

with open("quantconnect-cli.json") as file:
    project_index = json.loads(file.read())["projectIndex"]

project_dir = args.path

if project_dir not in project_index:
    print(f"'{project_dir}' does not exist in the project index")
    exit(1)

select_pycharm(project_dir)
select_vscode(project_dir)
