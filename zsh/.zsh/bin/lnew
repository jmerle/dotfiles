#!/usr/bin/env python

import argparse
import re
import shutil
import subprocess


def exec(args, background=False):
    try:
        proc = subprocess.run(args, close_fds=background)
        if proc.returncode != 0:
            exit(1)
    except FileNotFoundError:
        exit(1)


def capitalize(word: str) -> str:
    if word == "":
        return word
    return word[0].upper() + word[1:]


parser = argparse.ArgumentParser(description="create a new LEAN project")
parser.add_argument("type",
                    metavar="type",
                    choices=["classic", "alpha", "crypto"],
                    help="type of the project to create")
parser.add_argument("path",
                    help="path of the project to create")

args = parser.parse_args()

exec(["lean", "create-project", "--language", "python", args.path])

main_file_name = "main" if args.type == "classic" else args.type
shutil.copyfile(f"Python Template/{main_file_name}.py", f"{args.path}/main.py")
shutil.copyfile(f"Python Template/benchmark.py", f"{args.path}/benchmark.py")
shutil.copyfile(f"Python Template/research.ipynb", f"{args.path}/research.ipynb")

class_name = args.path
for word_to_remove in ["Algorithm", "Alpha Model", "Alpha"]:
    class_name = class_name.replace(word_to_remove, "")
class_name = re.sub(f"[^a-zA-Z0-9]", "", "".join(map(capitalize, class_name.split(" "))))

with open(f"{args.path}/main.py", "r") as file:
    main_content = file.read()

main_content = main_content.replace("MyAlgorithm", f"{class_name}Algorithm")
main_content = main_content.replace("MyAlphaModel", f"{class_name}AlphaModel")

with open(f"{args.path}/main.py", "w") as file:
    file.write(main_content)
